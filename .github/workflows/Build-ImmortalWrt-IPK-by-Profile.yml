# 工作流名称
name: Build-ImmortalWrt-IPK-from-Source

on:
  # 允许手动触发
  workflow_dispatch:
    inputs:
      profile:
        type: choice
        description: '请选择您的设备型号 (用于配置编译环境)'
        options:
          - ariaboard_photonicat
          - armsom_sige3
          - armsom_sige7
          - cyber_cyber3588-aib
          - ezpro_mrkaio-m6s
          - firefly_roc-rk3328-cc
          - firefly_roc-rk3568-pc
          - friendlyarm_nanopc-t4
          - friendlyarm_nanopc-t6
          - friendlyarm_nanopi-r2c
          - friendlyarm_nanopi-r2c-plus
          - friendlyarm_nanopi-r2s
          - friendlyarm_nanopi-r3s
          - friendlyarm_nanopi-r4s
          - friendlyarm_nanopi-r4se
          - friendlyarm_nanopi-r4s-enterprise
          - friendlyarm_nanopi-r5c
          - friendlyarm_nanopi-r5s
          - friendlyarm_nanopi-r6c
          - friendlyarm_nanopi-r6s
          - huake_guangmiao-g4c
          - lunzn_fastrhino-r66s
          - lunzn_fastrhino-r68s
          - lyt_t68m
          - pine64_rock64
          - pine64_rockpro64
          - radxa_cm3_io
          - radxa_e25
          - radxa_rock-3a
          - radxa_rock-3b
          - radxa_rock-3c
          - radxa_rock-5a
          - radxa_rock-5b
          - radxa_rock-pi-4a
          - radxa_rock-pi-e
          - radxa_rock-pi-s
          - radxa_zero-3e
          - radxa_zero-3w
          - sinovoip_bpi-r2-pro
          - xunlong_orangepi-5
          - xunlong_orangepi-5-plus
          - xunlong_orangepi-r1-plus
          - xunlong_orangepi-r1-plus-lts
        required: true
        default: 'friendlyarm_nanopi-r4s'
      package_repo:
        description: '要编译的插件 Git 仓库地址'
        required: true
        default: 'https://github.com/sirpdboy/luci-app-ddns-go'
      package_name:
        description: '插件包名 (通常是仓库名)'
        required: true
        default: 'luci-app-ddns-go'
      immortalwrt_branch_or_tag:
        description: '要编译的 ImmortalWrt Git 分支或标签'
        required: true
        default: 'v24.10.2'

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential clang flex bison g++ gawk gcc-multilib g++-multilib \
          gettext git libncurses5-dev libssl-dev python3-distutils rsync unzip zlib1g-dev \
          file wget python3-pip
          sudo pip3 install pyelftools

      - name: Cache build environment
        uses: actions/cache@v4
        with:
          path: |
            ~/immortalwrt/staging_dir
            ~/immortalwrt/toolchain
            ~/immortalwrt/tmp
            ~/immortalwrt/dl
          key: ${{ runner.os }}-immortalwrt-${{ inputs.immortalwrt_branch_or_tag }}-${{ inputs.profile }}

      - name: Clone ImmortalWrt source code
        run: |
          if [ ! -d "~/immortalwrt" ]; then
            git clone https://github.com/immortalwrt/immortalwrt.git -b ${{ inputs.immortalwrt_branch_or_tag }} --depth 1 ~/immortalwrt
          fi

      - name: Setup feeds and clone custom package
        run: |
          cd ~/immortalwrt
          
          # 更新默认 feeds
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          
          # 直接克隆插件到 package 目录
          echo "正在克隆插件仓库到 package/${{ inputs.package_name }}..."
          git clone ${{ inputs.package_repo }} package/${{ inputs.package_name }}

      - name: Configure build target
        run: |
          cd ~/immortalwrt
          
          # 配置目标设备
          echo "CONFIG_TARGET_rockchip=y" > .config
          echo "CONFIG_TARGET_rockchip_armv8=y" >> .config
          echo "CONFIG_TARGET_rockchip_armv8_DEVICE_${{ inputs.profile }}=y" >> .config
          
          # 添加包到编译配置
          echo "CONFIG_PACKAGE_${{ inputs.package_name }}=m" >> .config
          
          make defconfig

      - name: Debug package location
        run: |
          cd ~/immortalwrt
          
          echo "=== 检查插件是否正确克隆 ==="
          ls -la package/${{ inputs.package_name }}/ || echo "插件目录不存在"
          
          echo "=== 检查 Makefile ==="
          if [ -f "package/${{ inputs.package_name }}/Makefile" ]; then
            echo "Makefile 存在，显示前20行："
            head -20 package/${{ inputs.package_name }}/Makefile
          else
            echo "Makefile 不存在，查找其他可能的构建文件："
            find package/${{ inputs.package_name }}/ -name "Makefile*" -o -name "*.mk"
          fi
          
          echo "=== 插件目录完整结构 ==="
          tree package/${{ inputs.package_name }}/ || ls -laR package/${{ inputs.package_name }}/

      - name: Download dependencies
        run: |
          cd ~/immortalwrt
          make download -j$(nproc)

      - name: Compile the packages
        run: |
          cd ~/immortalwrt
          
          echo "当前目录: $(pwd)"
          
          # 检查包是否存在
          if [ ! -d "package/${{ inputs.package_name }}" ]; then
            echo "❌ 错误: ${{ inputs.package_name }} 目录不存在"
            exit 1
          fi
          
          echo "✅ ${{ inputs.package_name }} 目录存在"
          
          # 检查子目录结构并编译
          if [ -d "package/${{ inputs.package_name }}/ddns-go" ] && [ -d "package/${{ inputs.package_name }}/luci-app-ddns-go" ]; then
            echo "发现两个子包，分别编译..."
            
            echo "编译 ddns-go..."
            make "package/${{ inputs.package_name }}/ddns-go/compile" -j$(nproc) V=s
            
            echo "编译 luci-app-ddns-go..."
            make "package/${{ inputs.package_name }}/luci-app-ddns-go/compile" -j$(nproc) V=s
            
          elif [ -f "package/${{ inputs.package_name }}/Makefile" ]; then
            echo "发现根目录 Makefile，直接编译整个包..."
            make "package/${{ inputs.package_name }}/compile" -j$(nproc) V=s
            
          else
            echo "❌ 未找到有效的编译目标"
            echo "目录结构:"
            ls -la "package/${{ inputs.package_name }}/"
            exit 1
          fi

      - name: Check compiled packages
        run: |
          cd ~/immortalwrt
          
          echo "=== 查找编译生成的 IPK 文件 ==="
          find bin/ -name "*.ipk" -type f | grep -i ddns || echo "未找到 ddns 相关的 IPK 文件"
          
          echo "=== 所有编译生成的 IPK 文件 ==="
          find bin/ -name "*.ipk" -type f || echo "未找到任何 IPK 文件"
          
          echo "=== IPK 文件详细信息 ==="
          find bin/ -name "*.ipk" -type f -exec ls -la {} \; || true

      - name: Organize and upload IPK package
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "ipk-${{ inputs.package_name }}-${{ inputs.profile }}-${{ github.run_number }}"
          name: "ImmortalWrt - ${{ inputs.package_name }} (${{ inputs.profile }})"
          body: |
            **自动编译生成的 IPK 插件包**
            
            📦 **编译信息:**
            - ImmortalWrt 版本: `${{ inputs.immortalwrt_branch_or_tag }}`
            - 目标设备: `${{ inputs.profile }}`
            - 插件仓库: `${{ inputs.package_repo }}`
            - 编译时间: ${{ github.event.head_commit.timestamp }}
            - 工作流运行: #${{ github.run_number }}
            
            📋 **安装说明:**
            1. 将 IPK 文件上传到路由器
            2. 使用以下命令安装: `opkg install *.ipk`
            3. 重启 luci 服务: `/etc/init.d/uhttpd restart`
            
            ⚠️  **注意事项:**
            - 请确保路由器架构与编译目标一致
            - 安装前建议备份系统配置
          files: |
            ~/immortalwrt/bin/packages/*/*/*.ipk
          prerelease: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
