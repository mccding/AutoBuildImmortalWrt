# 工作流的名称
name: 编译 luci-app-netspeedtest

# 触发工作流的事件
on:
  # 允许手动触发工作流
  workflow_dispatch:
  
# 工作流中的任务 (jobs)
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # 步骤 1: 检出 P3TERX/Actions-OpenWrt
      # 这个 Action 包含了所有 OpenWrt 编译所需的环境和工具
      - name: 检出 P3TERX/Actions-OpenWrt
        uses: P3TERX/Actions-OpenWrt@v1
        with:
          # 我们使用 ImmortalWrt 的源码
          openwrt_branch: master
          openwrt_repo: https://github.com/immortalwrt/immortalwrt.git

      # 步骤 2: 自定义配置
      # 在这一步，我们配置设备型号和要编译的软件包
      - name: 自定义配置
        run: |
          # 进入 ImmortalWrt 源码目录
          cd openwrt
          
          # 克隆 luci-app-netspeedtest 源码到 package 目录
          git clone --depth 1 https://github.com/sirpdboy/luci-app-netspeedtest.git package/luci-app-netspeedtest

          # 创建一个最小化的 .config 文件
          cat >> .config << EOF
          CONFIG_TARGET_rockchip=y
          CONFIG_TARGET_rockchip_armv8=y
          CONFIG_TARGET_rockchip_armv8_DEVICE_friendlyarm_nanopi-r5s=y
          CONFIG_PACKAGE_luci-app-netspeedtest=y
          EOF
          
          # 让编译系统自动分析和选择所有必需的依赖包
          make defconfig
          
          # 步骤 3: 编译 luci-app
          # 使用 make 命令进行编译
      - name: 编译 luci-app
        run: |
          cd openwrt
          make -j$(nproc) package/luci-app-netspeedtest/compile

      # 步骤 4: 上传编译好的 .ipk 包作为构建产物
      - name: 上传编译产物
        uses: actions/upload-artifact@v4
        with:
          name: luci-app-netspeedtest-ipk
          path: |
            openwrt/bin/packages/*/luci-app-netspeedtest_*.ipk
